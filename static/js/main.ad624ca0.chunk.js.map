{"version":3,"sources":["types/filter-type.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","components/helpers/helpers.ts","index.tsx"],"names":["SearchType","TodoList","memo","todos","onSelectTodo","selectedTodoId","className","map","id","completed","title","isSelected","cn","type","onClick","TodoFilter","searchQuery","setSearchQuery","completedFilter","setCompletedFilter","hasFilters","onClear","value","onChange","event","target","all","active","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","onClose","userId","useState","isUserLoading","setIsUserLoading","user","setUser","useEffect","getUserById","userFromServer","finally","href","email","name","App","query","todosFromServer","setTodosFromServer","setSelectedTodoId","isLoading","setIsLoading","compleatedFilter","find","closeModal","useCallback","selectTodo","todosFilteredBySelect","useMemo","filter","requestedTodos","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad624ca0.chunk.js","sourcesContent":["export enum SearchType {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import { memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo [],\n  selectedTodoId: number | null,\n  onSelectTodo: (todoId: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  onSelectTodo,\n  selectedTodoId,\n}) => {\n  // console.log(isSelected);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n\n        {todos.map(({ id, completed, title }) => {\n          const isSelected = selectedTodoId === id;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelected,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn({\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import { memo } from 'react';\nimport { SearchType } from '../../types/filter-type';\n\ninterface Props {\n  searchQuery: string,\n  setSearchQuery: (query: string) => void,\n  completedFilter: SearchType,\n  setCompletedFilter: (searchType: SearchType) => void;\n  hasFilters: boolean,\n  onClear: () => void,\n}\n\n// const mapCompletedFilter = (value: SearchType): SearchType => {\n//   switch (value) {\n//     case SearchType.active:\n//       return SearchType.active;\n//     case SearchType.completed:\n//       return SearchType.completed;\n//     case SearchType.all:\n//       return SearchType.all;\n\n//     default:\n//       return SearchType.all;\n//   }\n// };\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  searchQuery,\n  setSearchQuery,\n  completedFilter,\n  setCompletedFilter,\n  hasFilters,\n  onClear,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={completedFilter}\n          onChange={event => setCompletedFilter(\n            event.target.value as SearchType,\n          )}\n        >\n          <option value={SearchType.all}>All</option>\n          <option value={SearchType.active}>Active</option>\n          <option value={SearchType.completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={event => setSearchQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {hasFilters\n        && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClear}\n            />\n          </span>\n        )}\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUserById = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo,\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = memo(({\n  selectedTodo,\n  onClose,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  const [isUserLoading, setIsUserLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n    setUser(null);\n    getUserById(userId)\n      .then((userFromServer) => setUser(userFromServer))\n      .finally(() => setIsUserLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              {user\n                && (\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {completed\n                      ? (<strong className=\"has-text-success\">Done</strong>)\n                      : (<strong className=\"has-text-danger\">Planned</strong>)}\n                    {' by '}\n\n                    <a href={`mailto:${user.email}`}>\n                      {user.name}\n                    </a>\n                  </p>\n                )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport './style.scss';\nimport 'bulma/css/bulma.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SearchType } from './types/filter-type';\nimport { setRequestedTodos } from './components/helpers/helpers';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo []>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [compleatedFilter, setCompletedFilter] = useState<SearchType>(SearchType.all);\n\n  const selectedTodo = todosFromServer.find(({ id }) => id === selectedTodoId) || null;\n\n  const closeModal = useCallback(() => setSelectedTodoId(null), []);\n  const selectTodo = useCallback((id: number) => setSelectedTodoId(id), []);\n\n  const todosFilteredBySelect = useMemo(\n    () => {\n      switch (compleatedFilter) {\n        case SearchType.active:\n          return todosFromServer.filter(({ completed }) => !completed);\n        case SearchType.completed:\n          return todosFromServer.filter(({ completed }) => completed);\n        default:\n          return [...todosFromServer];\n      }\n    }, [compleatedFilter, todosFromServer],\n  );\n\n  const requestedTodos = setRequestedTodos(todosFilteredBySelect, searchQuery);\n\n  const hasFilters = searchQuery !== '' || compleatedFilter !== SearchType.all;\n\n  const clearAllFilters = () => {\n    setSearchQuery('');\n    setCompletedFilter(SearchType.all);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodosFromServer)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                completedFilter={compleatedFilter}\n                setCompletedFilter={setCompletedFilter}\n                hasFilters={hasFilters}\n                onClear={clearAllFilters}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!isLoading && (\n                <TodoList\n                  selectedTodoId={selectedTodoId}\n                  todos={requestedTodos}\n                  onSelectTodo={selectTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../../types/Todo';\n\nexport const setRequestedTodos = (todos: Todo [], query: string) => {\n  if (query) {\n    return todos.filter(({ title }) => title\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n  }\n\n  return [...todos];\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}